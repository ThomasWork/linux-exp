set nocompatible            " 关闭 vi 兼容模式
set ruler                   " 打开状态栏标尺
set laststatus=2            " 显示状态栏 (默认值为 1, 当前行号和列号和操作模式显示在最后一行)
set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\
                            " 设置在状态行显示的信息

syntax on                   " 自动语法高亮
set number                  " 显示行号
colorscheme desert          " 设定配色方案
"set scrolloff=10			"设置始终距离底部多少行

"set textwidth=80            " 设置每行20个字符自动换行
"set fo+=Mm                  " 中文40个字换行

set smartindent             " 开启新行时使用智能自动缩进，但是缩进长度为8
set tabstop=4               " 设定 tab 所等同的空格长度为 4
set softtabstop=4           " 使得按退格键时可以一次删掉 4 个空格，（不然删除tab键需要一下）
set shiftwidth=4            " 设定 << 和 >> 命令移动时的宽度为 4，加上这个之后，智能自动缩进变成了4
"set autoindent              " 继承前一行的缩进方式，特别适用于多行注释

"搜索时用到的命令
set ignorecase smartcase    " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set nowrapscan              " 禁止在搜索到文件两端时重新搜索
set incsearch               " 输入搜索内容时就显示搜索结果
set hlsearch                " 搜索时高亮显示被找到的文本


"-----------------------------------------------------------------
""括号自动补全
"-----------------------------------------------------------------
:inoremap " ""<ESC>i
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
"向上移动是k字符，使用O表示在上一行后面增加一个空行并输入
:inoremap { {<CR>}<ESC>O
"<ESC>i<CR><ESC>V<O
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap < <><ESC>i
":inoremap > <c-r>=ClosePair('>')<CR>
":map命令，可以将键盘上的某个按键与Vim的命令绑定起来。例如使用以下命令，可以通过F5键将单词用花括号括起来：
":map <F5> i{<Esc>ea}<Esc>，注意这里呢，因为已经{补全了，所以会多一个}
 
function ClosePair(char)
if getline('.')[col('.') - 1] == a:char
return "\<Right>"
else
return a:char
endif
endf

"返回操作系统类型(Windows, Linux等)
function! MySys()
    if has("win16") || has("win32") || has("win64") || has("win95")
        return "windows"
    elseif has("unix")
        return "linux"
    endif
endfunction

" 用户目录变量$VIMFILES
if MySys() == "windows"
    let $VIMFILES = $VIM.'/vimfiles'
elseif MySys() == "linux"
    let $VIMFILES = $HOME.'/.vim'
endif


" ============================================== 编译 && 运行 ======================================== "
"插入模式
:inoremap <F5> <ESC>:call CompileCode()<CR>
"普通模式
:nnoremap <F5> <ESC>:call CompileCode()<CR>
"常规模式，运算符模式，可视化模式
:nnoremap <F6> :call RunResult()<CR>

"%表示文件名，%<表示文件名去掉后缀
" 编译C源文件
"-pedantic选项能够帮助程序员发现一些不符合 ANSI/ISO C标准的代码，但不是全部
"-Werror选项，那么GCC会在所有产生警告的地方停止编译
func! CompileGcc()
    exec "w"
    let compilecmd="!gcc -Wall -pedantic -std=c99 "
    let compileflag="-o %<"
    exec compilecmd." % ".compileflag
endfunc
" 编译C++源文件
func! CompileCpp()
    exec "w"
    let compilecmd="!g++ -Wall -pedantic -std=c++98 "
    let compileflag="-o %<"
    exec compilecmd." % ".compileflag
endfunc
" 编译Java源文件
func! CompileJava()
    exec "w"
    exec "!javac %"
endfunc

" 根据文件类型自动选择相应的编译函数
"&filetype是内部变量，需要在前面加&来使用
func! CompileCode()
        exec "w"
        if &filetype == "c"
            exec "call CompileGcc()"
        elseif &filetype == "cpp"
            exec "call CompileCpp()"
        elseif &filetype == "java"
            exec "call CompileJava()"
        elseif &filetype == "lua"
            exec "!lua %<.lua"
        elseif &filetype == "perl"
            exec "!perl %<.pl"
        elseif &filetype == "python"
            exec "!python %<.py"
        elseif &filetype == "ruby"
            exec "!ruby %<.rb"
        endif
endfunc
" 运行可执行文件
func! RunResult()
        exec "w"
        if &filetype == "c"
            exec "! ./%<"
        elseif &filetype == "cpp"
            exec "! ./%<"
        elseif &filetype == "java"
            exec "!java %<"
        elseif &filetype == "lua"
            exec "!lua %<.lua"
        elseif &filetype == "perl"
            exec "!perl %<.pl"
        elseif &filetype == "python"
            exec "!python %<.py"
        elseif &filetype == "ruby"
            exec "!ruby %<.rb"
        endif
endfunc
